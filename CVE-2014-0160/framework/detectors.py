import angr

class BugFoundError(Exception): # So we can stop the simulation manager and store the offending state. Might need to move it to the detector?
    def __init__(self, state, message="bug_found"):
        self.state = state
        
    def __str__(self):
        return str(str.state) 

class Detector():
    def __init__(self):
        self.hooks = {}
        
    def attach(self, project): # attach detector to project, this will install hooks and other things like breakpoints
        for symbol, hook in self.hooks.items():
            project.hook_symbol(symbol, hook)
            

    
recv = angr.SIM_PROCEDURES["posix"]["recv"]
send = angr.SIM_PROCEDURES["posix"]["send"]
        
class recv_hook(recv):
    def run(self, fd, dst, length, flags):
        max_len = self.state.solver.max(length)
        #print(f"recv: {max_len}")

        self.state.globals["recv_len"] = max_len

        a = super().run(fd, dst, length, flags)
        return a


class send_hook(send):
    def run(self, fd, dst, length, flags):
        max_len = self.state.solver.max(length)
        #print(f"send: {max_len}")

        self.state.globals["send_len"] = max_len

        if self.state.globals["recv_len"] < self.state.globals["send_len"]: # Perhaps this logic should move to a detector?
            raise BugFoundError(self.state, message="HeartBleed found!")

        a = super().run(fd, dst, length, flags)
        return a

class HearbleedDetector(Detector): #This is the detector for heartbleed: Not sure if this is right or not
    def __init__(self):
        self.hooks = {"recv":recv_hook(), "send":send_hook()}