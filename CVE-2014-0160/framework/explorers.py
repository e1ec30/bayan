import angr
from typing import *
from helpers import flatten
import detectors

class Explorer():
    def __init__(self, project: angr.Project, state: angr.sim_state.SimState) -> None:
        self.project = project
        self.sim = project.factory.simgr(state)
        self.buggy_states = []
    
    def stats(self) -> dict[str, Any]: # Here we can collect all the statistics we want so we can perform comparisons
        states = [x for x in self.sim.stashes.values()]
        bblocks = set()
        for st in flatten(states):
            bblocks.update(st.history.bbl_addrs)
        return {"Unique blocks explored": len(bblocks), "Number of buggy states": len(set(self.buggy_states))}   
    
    def go():
        print("this does nothing use one of the subclasses")

class NaiveExplorer(Explorer):
    def go(self, num_buggy): #We can change this to accept a timeout too
        while len(self.buggy_states) < num_buggy:
            try:
                self.sim.step()
            except detectors.BugFoundError as e:
                self.buggy_states.append(e.state)
        
        print(self.stats())


